theme_bw(base_size=20) + scale_colour_discrete(name="Linkage",
labels=c("Average", "Centroid", "Complete", "Single")) +
xlab(expression(paste("Distance between clusters (", delta, ")", sep=""))) +
ylab("Detection probability") + ggtitle("(b) Detection probability") + ylim(c(0, 1))
combined <- (plot1 + plot2) &
theme(legend.position = "right") & guides(colour=guide_legend(nrow=4, byrow=TRUE) )
ggsave(combined + plot_layout(guides = 'collect'), file="../figures/Figure5.pdf", width=14, height=4)
library(palmerpenguins)
library(ggplot2)
library(patchwork)
library(fastcluster)
options(ggplot2.discrete.colour=list(RColorBrewer::brewer.pal(6, "Accent")))
# Subset to female penguins in years 2008/2009 & bill/flipper length variables
penguins <- penguins[complete.cases(penguins), ]
dat <- penguins[penguins$sex == "female" & penguins$year != 2009, c(1, 3, 5)]
X <- dat[, -c(1)]
X <- as.matrix(X)
# Cluster and visualize data
K <- 5
hc <- hclust(dist(X)^2, method="average")
hc$labels <- dat$species
table( hc$labels, cutree(hc, K))
p1 <- ggdendro::ggdendrogram(hc, labels=FALSE) + ggtitle("(a) Dendrogram") +
geom_hline(yintercept=hc$height[nrow(X)-5] - 20, col="red", linetype="dashed") +
ylab("Height") + theme(axis.text.x=element_blank(),
plot.title = element_text(size=22),
axis.text.y=element_text(size=22))
p2 <- ggplot(data = penguins[penguins$sex == "female" & penguins$year != 2009, ]) +
geom_point(aes(x=bill_length_mm, y = flipper_length_mm,
fill = as.factor(cutree(hc, 5)),
shape=as.factor(species)), size = 5, colour="black") +
scale_fill_discrete(name="Clusters",
guide=guide_legend(ncol=2,
override.aes=list(shape=21))) +
scale_shape_manual(name="Species", values=c(21, 24, 22),
guide=guide_legend(override.aes=list(fill="black"))) +
xlab("Bill length (mm)") + ylab("Flipper length (mm)") +
coord_flip() +
theme_bw(base_size=22) + ggtitle("(b) Data") + theme(legend.position="right")
ggsave(p1+p2, file="../figures/Figure6.pdf", width=14, height=4)
library(ggplot2)
library(patchwork)
library(dplyr)
ev_cat <- NULL
n <- 200
nfeat <- 10
sig <- 1
for(id in 1:4) {
name_of_sim <- paste("../simulation-results/type1-est-n", n, "-q", nfeat, "-pt", id, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
ev_cat$len <- rep(NA, nrow(ev_cat))
ev_cat$len[grep("len_2", ev_cat$Model)] <- 2
ev_cat$len[grep("len_4", ev_cat$Model)] <- 4
ev_cat$len[grep("len_6", ev_cat$Model)] <- 6
ev_cat$len <- as.factor(ev_cat$len)
average <- ev_cat[ev_cat$Method == "average-iso-est-test-K-3" & ev_cat$effect == 0, ]
centroid <- ev_cat[ev_cat$Method == "centroid-iso-est-test-K-3" & ev_cat$effect == 0, ]
single <- ev_cat[ev_cat$Method == "single-iso-est-test-K-3" & ev_cat$effect == 0, ]
complete <- ev_cat[ev_cat$Method == "complete-iso-est-test-K-3" & ev_cat$effect == 0, ]
average_filter <- as.data.frame(average %>% group_by(len) %>% slice_head(n=500))
centroid_filter <- as.data.frame(centroid %>% group_by(len) %>% slice_head(n=500))
single_filter <- as.data.frame(single %>% group_by(len) %>% slice_head(n=500))
complete_filter <- as.data.frame(complete %>% group_by(len) %>% slice_head(n=500))
#### QQ Plots ####
p1 <- ggplot(average_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(a) Average linkage")
p2 <- ggplot(centroid_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(b) Centroid linkage")
p3 <- ggplot(single_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(c) Single linkage")
p4 <- ggplot(complete_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(d) Complete linkage")
combined <- (p1 + p2 + p3 + p4) & theme(legend.position = "bottom") &
scale_colour_manual(name=expression("Distance between clusters ("~delta~")"),
values = c("#9ecae1", "#4292c6", "#08519c")) &
guides(colour=guide_legend(nrow=1,byrow=TRUE,
override.aes = list(size=5)))
combined
ggsave(combined + plot_layout(nrow=1, guides = "collect"), file="../figures/FigureS1.pdf",
height=3.5, width=12.5)
library(ggplot2)
library(patchwork)
library(dplyr)
ev_cat <- NULL
n <- 200
nfeat <- 10
sig <- 1
for(id in 1:4) {
name_of_sim <- paste("../simulation-results/type1-est-n", n, "-q", nfeat, "-pt", id, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
ev_cat$len <- rep(NA, nrow(ev_cat))
ev_cat$len[grep("len_2", ev_cat$Model)] <- 2
ev_cat$len[grep("len_4", ev_cat$Model)] <- 4
ev_cat$len[grep("len_6", ev_cat$Model)] <- 6
ev_cat$len <- as.factor(ev_cat$len)
average <- ev_cat[ev_cat$Method == "average-iso-est-test-K-3" & ev_cat$effect == 0, ]
centroid <- ev_cat[ev_cat$Method == "centroid-iso-est-test-K-3" & ev_cat$effect == 0, ]
single <- ev_cat[ev_cat$Method == "single-iso-est-test-K-3" & ev_cat$effect == 0, ]
complete <- ev_cat[ev_cat$Method == "complete-iso-est-test-K-3" & ev_cat$effect == 0, ]
average_filter <- as.data.frame(average %>% group_by(len) %>% slice_head(n=500))
centroid_filter <- as.data.frame(centroid %>% group_by(len) %>% slice_head(n=500))
single_filter <- as.data.frame(single %>% group_by(len) %>% slice_head(n=500))
complete_filter <- as.data.frame(complete %>% group_by(len) %>% slice_head(n=500))
#### QQ Plots ####
p1 <- ggplot(average_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(a) Average linkage")
p2 <- ggplot(centroid_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(b) Centroid linkage")
p3 <- ggplot(single_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(c) Single linkage")
p4 <- ggplot(complete_filter) +
geom_qq(aes(sample=pval, group=len, colour=len), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Uniform(0, 1) quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 15) +
ggtitle("(d) Complete linkage")
combined <- (p1 + p2 + p3 + p4) & theme(legend.position = "bottom") &
scale_colour_manual(name=expression("Distance between clusters ("~delta~")"),
values = c("#9ecae1", "#4292c6", "#08519c")) &
guides(colour=guide_legend(nrow=1,byrow=TRUE,
override.aes = list(size=5)))
combined
ggsave(combined + plot_layout(nrow=1, guides = "collect"), file="../figures/FigureS1.pdf",
height=3.5, width=12.5)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
centroid <- ev_cat[ev_cat$Method == "centroid-iso-test-K-3", ]
single <- ev_cat[ev_cat$Method == "single-iso-test-K-3", ]
complete <- ev_cat[ev_cat$Method == "complete-iso-test-K-3", ]
threshold <- 10
g1 <- ggplot(average[average$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(a) Average linkage")
g2 <- ggplot(centroid[centroid$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(b) Centroid linkage")
g3 <- ggplot(single[single$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(c) Single linkage")
g4 <- ggplot(complete[complete$nmin >= threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(d) Complete linkage")
ggsave(((g1 + g2 + g3 + g4) + plot_layout(nrow=1)) & theme_bw(base_size = 13),
file="../figures/FigureS2abcd.pdf",
width=12, height=2.5)
p1 <- ggplot(average[average$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(e) Average linkage")
p2 <- ggplot(centroid[centroid$nmin <  threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(f) Centroid linkage")
p3 <- ggplot(single[single$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(g) Single linkage")
p4 <- ggplot(complete[complete$nmin < threshold, ])+
geom_smooth(aes(x=effect, y=as.numeric(rejects)),
method="gam", method.args = list(family = "binomial")) + ylim(c(0, 1)) +
ylab(expression("Power at"~alpha~"= 0.05")) +
xlab(expression(paste("Effect size (", Delta, ")", sep=""))) +
ggtitle("(h) Complete linkage")
ggsave(((p1 + p2 + p3 + p4) + plot_layout(nrow=1)) & theme_bw(base_size = 13),
file="../figures/FigureS2efgh.pdf", width=12, height=2.5)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
threshold <- 10
p1 <- ggplot(average[average$effect == 5 & average$nmin >= threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(a) min {|", C[k], "|, |", C["k'"], "|} \u2265 10")))
p2 <- ggplot(average[average$effect == 5 & average$nmin < threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(b) min {|", C[k], "|, |", C["k'"], "|} < 10")))
ggsave((p1+p2) & theme_bw(base_size=25),
file="../figures/FigureS3.pdf", width=16, height=4.5, device=cairo_pdf)
library(ggplot2)
library(patchwork)
library(class)
library(fastcluster)
set.seed(123)
n <- 100
q <- 2
sig <- 1
X <- matrix(rnorm(n*q, sd=sig), n, q)
dat <- data.frame(X1=X[, 1], X2=X[, 2])
dat.train <- dat[1:50, ]
dat.test <- dat[51:100, ]
blankdata <- ggplot(dat) + geom_point(aes(X1, X2), cex=2) +
xlab("") + ylab("")  +
theme_bw() + theme(axis.ticks=element_blank(), axis.text=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border=element_blank()) +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3))
shapedata <- ggplot(dat) + geom_point(aes(X1, X2, shape=as.factor(c(rep(1, 50), rep(2, 50)))),
cex=2, alpha=1) +
xlab("") + ylab("") + theme_bw(base_size=18) +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none") +
scale_shape_manual(name="Train",
values=c("square", "triangle"))  +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3)) +
ggtitle("(a) Data") + xlab("Feature 1") + ylab("Feature 2")
hc <- hclust(dist(X[1:50, ])^2, method="average")
dat.train$est <- as.factor(cutree(hc, 3))
traindata <- ggplot(dat.train) +
geom_point(aes(X1, X2, col=est), cex=2, alpha=1, shape="square") +
xlab("") + ylab("")  + scale_colour_manual(name="Clusters",
values=c("#66c2a5", "#fc8d62")) +
theme_bw(base_size=18) +theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none") +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3)) + ggtitle("(b) Training set") + xlab("Feature 1") + ylab("Feature 2")
traindata
library(ggplot2)
library(patchwork)
library(class)
library(fastcluster)
set.seed(123)
n <- 100
q <- 2
sig <- 1
X <- matrix(rnorm(n*q, sd=sig), n, q)
dat <- data.frame(X1=X[, 1], X2=X[, 2])
dat.train <- dat[1:50, ]
dat.test <- dat[51:100, ]
blankdata <- ggplot(dat) + geom_point(aes(X1, X2), cex=2) +
xlab("") + ylab("")  +
theme_bw() + theme(axis.ticks=element_blank(), axis.text=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border=element_blank()) +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3))
shapedata <- ggplot(dat) + geom_point(aes(X1, X2, shape=as.factor(c(rep(1, 50), rep(2, 50)))),
cex=2, alpha=1) +
xlab("") + ylab("") + theme_bw(base_size=18) +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none") +
scale_shape_manual(name="Train",
values=c("square", "triangle"))  +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3)) +
ggtitle("(a) Data") + xlab("Feature 1") + ylab("Feature 2")
hc <- hclust(dist(X[1:50, ])^2, method="average")
dat.train$est <- as.factor(cutree(hc, 3))
traindata <- ggplot(dat.train) +
geom_point(aes(X1, X2, col=est), cex=2, alpha=1, shape="square") +
xlab("") + ylab("")  + scale_colour_manual(name="Clusters",
values=c("#66c2a5", "#fc8d62" "#8da0cb")) +
library(ggplot2)
library(patchwork)
library(class)
library(fastcluster)
set.seed(123)
n <- 100
q <- 2
sig <- 1
X <- matrix(rnorm(n*q, sd=sig), n, q)
dat <- data.frame(X1=X[, 1], X2=X[, 2])
dat.train <- dat[1:50, ]
dat.test <- dat[51:100, ]
blankdata <- ggplot(dat) + geom_point(aes(X1, X2), cex=2) +
xlab("") + ylab("")  +
theme_bw() + theme(axis.ticks=element_blank(), axis.text=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border=element_blank()) +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3))
shapedata <- ggplot(dat) + geom_point(aes(X1, X2, shape=as.factor(c(rep(1, 50), rep(2, 50)))),
cex=2, alpha=1) +
xlab("") + ylab("") + theme_bw(base_size=18) +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none") +
scale_shape_manual(name="Train",
values=c("square", "triangle"))  +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3)) +
ggtitle("(a) Data") + xlab("Feature 1") + ylab("Feature 2")
hc <- hclust(dist(X[1:50, ])^2, method="average")
dat.train$est <- as.factor(cutree(hc, 3))
traindata <- ggplot(dat.train) +
geom_point(aes(X1, X2, col=est), cex=2, alpha=1, shape="square") +
xlab("") + ylab("")  + scale_colour_manual(name="Clusters",
values=c("#66c2a5", "#fc8d62", "#8da0cb")) +
theme_bw(base_size=18) +theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none") +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3)) + ggtitle("(b) Training set") + xlab("Feature 1") + ylab("Feature 2")
traindata
dat.test$est <- knn(X[1:50, ], X[51:100, ], dat.train$est, k=3)
testdata <- ggplot(dat.test) + geom_point(aes(X1, X2, col=est), cex=2, alpha=1, shape="triangle") +
xlab("") + ylab("")  + scale_colour_manual(name="Clusters",
values=c("#66c2a5", "#fc8d62", "#8da0cb")) +
theme_bw(base_size=18) +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="none")  +
xlim(c(-2.8, 2.8)) +  ylim(c(-2.3, 3.3)) + ggtitle("(c) Test set") + xlab("Feature 1") + ylab("Feature 2")
testdata
load("../simulation-results/naive-type1-n100-q2-sig1.Rdata")
average <- ev[ev$Method == "average-split-Z-test-K-3", ]
qq <- ggplot(average[!is.na(average$stat), ][1:2000, ]) +
geom_qq(aes(sample=pval, group=Model), size=0.5, distribution=qunif) +
geom_abline(slope=1, intercept=0, col="black") +
xlab("Theoretical quantiles") +
ylab("Empirical quantiles") + theme_bw(base_size = 18) +
ggtitle("(d) QQ plot") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
shapedata+traindata+testdata + qq + plot_layout(nrow=1)
ggsave(shapedata+traindata+testdata + qq + plot_layout(nrow=1),
file="../figures/Figure2.pdf", width=12, height=3)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
threshold <- 10
p1 <- ggplot(average[average$effect == 5 & average$nmin >= threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(a) min {|", C[k], "|, |", C["k'"], "|} \u2265 10")))
p2 <- ggplot(average[average$effect == 5 & average$nmin < threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(b) min {|", C[k], "|, |", C["k'"], "|} < 10")))
ggsave((p1+p2) & theme_bw(base_size=25),
file="../figures/FigureS3.pdf", width=16, height=4.5, device=cairo_pdf)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
threshold <- 10
p1 <- ggplot(average[average$effect == 5 & average$nmin >= threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(a) min {|", C[k], "|, |", C["k'"], "|} \u2265 10")))
p2 <- ggplot(average[average$effect == 5 & average$nmin < threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(b) min {|", C[k], "|, |", C["k'"], "|} < 10")))
ggsave((p1+p2) & theme_bw(base_size=25),
file="../figures/FigureS3.pdf", width=16, height=4.5, device=cairo_pdf)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
threshold <- 10
p1 <- ggplot(average[average$effect == 5 & average$nmin >= threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(a) min {|", C[k], "|, |", C["k'"], "|} \u2265 10")))
p2 <- ggplot(average[average$effect == 5 & average$nmin < threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(b) min {|", C[k], "|, |", C["k'"], "|} < 10")))
ggsave((p1+p2) & theme_bw(base_size=25),
file="../figures/FigureS3.pdf", width=16, height=4.5)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
threshold <- 10
p1 <- ggplot(average[average$effect == 5 & average$nmin >= threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(a) min {|", C[k], "|, |", C["k'"], "|} \u2265 10")))
p2 <- ggplot(average[average$effect == 5 & average$nmin < threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(b) min {|", C[k], "|, |", C["k'"], "|} < 10")))
ggsave((p1+p2) & theme_bw(base_size=25),
file="../figures/FigureS3.pdf", width=16, height=4.5)
library(ggplot2)
library(patchwork)
ev_cat <- NULL
n <- 150
for(q in c(10)) {
for(effect in rev(seq(3, 7, by=0.5))) {
name_of_sim <- paste("../simulation-results/power-n", n, "-q", q, "-effect-", effect, ".Rdata", sep="")
if(file.exists(name_of_sim)) {
load(name_of_sim)
ev_cat <- rbind(ev_cat, ev)
}
}
}
average <- ev_cat[ev_cat$Method == "average-iso-test-K-3", ]
threshold <- 10
p1 <- ggplot(average[average$effect == 5 & average$nmin >= threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(a) min {|", C[k], "|, |", C["k'"], "|} \u2265 10")))
p2 <- ggplot(average[average$effect == 5 & average$nmin < threshold, ]) +
geom_smooth(aes(x=boundary, y=log10(pval))) +
ylab(expression(log[10]~"(p-value)")) +
xlab("Distance to left boundary") + ggtitle(expression(paste("(b) min {|", C[k], "|, |", C["k'"], "|} < 10")))
ggsave((p1+p2) & theme_bw(base_size=25),
file="../figures/FigureS3.pdf", width=16, height=4.5)
library(palmerpenguins)
library(ggplot2)
library(clusterpval)
library(fastcluster)
library(patchwork)
source("util.R")
